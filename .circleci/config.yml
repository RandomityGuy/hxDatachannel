# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
    win: circleci/windows@4.1.1 # The Windows orb give you everything you need to start using the Windows executor.

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    macos:
      xcode: 14.1.0 # Specify the Xcode version to use
    resource_class: macos.x86.medium.gen2
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      NPROC: 4
      COMMIT_TAG: pipeline.git.tag
    steps:
      - add_ssh_keys:
          fingerprints:
            - "82:42:56:a0:57:43:95:4e:00:c0:8c:c1:7f:70:74:47"
      - checkout:
          path: ~/datachannel

      - run:
          name: Install brew dependencies
          command: |
            brew install cmake
            brew install pkg-config
            brew install libpthread-stubs
            brew install neko
            brew install nasm

      - run:
          name: Install Haxe
          command: |
            set -eux
            download_url="https://github.com/HaxeFoundation/haxe/releases/download/4.3.3/haxe-4.3.3-osx.tar.gz"
            echo "Downloading [$download_url]..."
            mkdir /tmp/haxe
            curl -fsSL --retry 3 --retry-delay 5 "$download_url" -o /tmp/haxe.tar.gz
            tar xzvf /tmp/haxe.tar.gz -C /tmp/haxe --strip-components=1
            export PATH=/tmp/haxe/:"$PATH"
            export HAXE_STD_PATH=/tmp/haxe/std
            haxelib setup ~/haxelib
            haxelib list
            haxelib install hashlink
            haxelib install hxWebSockets
          

      - run:
          name: Compile zlib
          command: |
            mkdir -p ~/deps
            cd ~/deps
            curl https://www.zlib.net/zlib-1.3.tar.xz | tar xz
            cd zlib-1.3
            if [ ! -f /usr/local/lib/libz.1.3.dylib ]; then
              cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.15" -DCMAKE_MACOSX_RPATH=TRUE
              cmake --build build --config Release -j$NPROC
              sudo cmake --install build
            fi

      - run:
          name: Compile jpeg-turbo (x86)
          command: |
            mkdir -p ~/deps
            cd ~/deps
            curl -L https://downloads.sourceforge.net/project/libjpeg-turbo/2.1.4/libjpeg-turbo-2.1.4.tar.gz | tar xz
            cd libjpeg-turbo-2.1.4
            if [ ! -f /usr/local/lib/libturbojpeg.0.2.0.dylib ]; then
              cmake -S. -Bbuild-x86 -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="x86_64" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.15" -DCMAKE_MACOSX_RPATH=TRUE -DCMAKE_INSTALL_PREFIX=/usr/local
              cmake --build build-x86 --config release -j$NPROC
            fi

      - run:
          name: Compile jpeg-turbo (ARM64)
          command: |
            cd ~/deps/libjpeg-turbo-2.1.4
            if [ ! -f /usr/local/lib/libturbojpeg.0.2.0.dylib ]; then
              cmake -S. -Bbuild-arm64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="arm64" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.15" -DCMAKE_MACOSX_RPATH=TRUE -DCMAKE_INSTALL_PREFIX=/usr/local
              cmake --build build-arm64 --config release -j$NPROC
            fi

      - run:
          name: Install jpeg-turbo (Universal)
          command: |
            if [ ! -f /usr/local/lib/libturbojpeg.0.2.0.dylib ]; then
              cd ~/deps/libjpeg-turbo-2.1.4/build-arm64
              for i in libjpeg.62.3.0.dylib cjpeg cjpeg-static djpeg djpeg-static jcstest jpegtran jpegtran-static libjpeg.a libturbojpeg.a libturbojpeg.0.2.0.dylib rdjpgcom strtest tjbench tjbench-static tjexample tjunittest tjunittest-static wrjpgcom
              do
              lipo -create -output $i ../build-x86/$i $i
              done
              sudo cmake --install .
            fi

      - run:
          name: Compile libogg
          command: |
            mkdir -p ~/deps
            cd ~/deps
            curl -L https://downloads.xiph.org/releases/ogg/libogg-1.3.5.tar.xz | tar xz
            cd libogg-1.3.5
            if [ ! -f /usr/local/lib/libogg.0.8.5.dylib ]; then
              cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.15" -DBUILD_SHARED_LIBS=ON -DCMAKE_MACOSX_RPATH=TRUE
              cmake --build build --config Release -j$NPROC
              sudo cmake --install build
            fi

      - run:
          name: Compile libvorbis
          command: |
            mkdir -p ~/deps
            cd ~/deps
            curl -L https://downloads.xiph.org/releases/vorbis/libvorbis-1.3.7.tar.xz | tar xz
            cd libvorbis-1.3.7
            if [ ! -f /usr/local/lib/libvorbis.0.4.9.dylib ]; then
              cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.15" -DBUILD_SHARED_LIBS=ON -DCMAKE_MACOSX_RPATH=TRUE
              cmake --build build --config Release -j$NPROC
              sudo cmake --install build
            fi

      - run:
          name: Compile libpng (x86)
          command: |
            mkdir -p ~/deps
            cd ~/deps
            curl -L https://download.sourceforge.net/libpng/libpng-1.6.39.tar.xz | tar xz
            cd libpng-1.6.39
            if [ ! -f /usr/local/lib/libpng16.16.dylib ]; then
              cmake -S. -Bbuild-x86 -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="x86_64" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.15" -DCMAKE_MACOSX_RPATH=TRUE
              cmake --build build-x86 --config release -j$NPROC
            fi

      - run:
          name: Compile libpng (arm64)
          command: |
            mkdir -p ~/deps
            cd ~/deps
            cd libpng-1.6.39
            if [ ! -f /usr/local/lib/libpng16.16.dylib ]; then
              cmake -S. -Bbuild-arm64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="arm64" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.15" -DCMAKE_MACOSX_RPATH=TRUE
              cmake --build build-arm64 --config release -j$NPROC
            fi

      - run:
          name: Install libpng (Universal)
          command: |
            if [ ! -f /usr/local/lib/libpng16.16.dylib ]; then
              cd ~/deps/libpng-1.6.39/build-arm64
              for i in libpng16.16.39.0.dylib libpng16.a png-fix-itxt pngfix pngimage pngstest pngtest pngunknown pngvalid
              do
              lipo -create -output $i ../build-x86/$i $i
              done
              sudo cmake --install .
            fi

      - run:
          name: Compile libuv
          command: |
            mkdir -p ~/deps
            cd ~/deps
            curl -fsSL https://github.com/libuv/libuv/archive/refs/tags/v1.44.2.tar.gz | tar xz
            cd libuv-1.44.2
            cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.15" -DCMAKE_MACOSX_RPATH=TRUE
            cmake --build build --config Release -j$NPROC
            sudo cmake --install build

      - run:
          name: Compile extension
          command: |
            mkdir -p ~/deps
            cd ~/deps
            git clone --depth=1 https://github.com/HaxeFoundation/hashlink
            cd hashlink
            mv ~/datachannel/cpp libs/datachannel
            echo -e "\nadd_subdirectory(datachannel)" >> libs/CMakeLists.txt
            curl -L https://raw.githubusercontent.com/RandomityGuy/hashlink/master/libs/ssl/CMakeLists.txt > libs/ssl/CMakeLists.txt
            cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.15" -DCMAKE_FIND_FRAMEWORK=LAST -DWITH_SQLITE=OFF -DWITH_FMT=ON -DWITH_OPENAL=OFF -DWITH_SDL=OFF -DWITH_SSL=ON -DWITH_UV=ON -DBUILD_TESTING=OFF -DCMAKE_MACOSX_RPATH=TRUE -DHASHLINK_LIBRARY_DIR="/usr/local/lib/" -DHASHLINK_INCLUDE_DIR="~/deps/hashlink/src"
            cmake --build build --config Release -j$NPROC
            sudo cmake --install build

      - run:
          name: Test extension
          command: |
            export PATH=/tmp/haxe/:"$PATH"
            export HAXE_STD_PATH=/tmp/haxe/std
            cd ~/datachannel
            haxelib dev datachannel .
            cd test/server
            haxe build_hl.hxml
            hl bin/main.hl &
            cd ../test/client
            haxe build_hl.hxml
            hl bin/main.hl > test_results.txt
            if grep -q passed test_results.txt; then
              exit 0
            else
              exit 1
            fi

  build-win:
    executor: 
        name: win/server-2022
        shell: bash.exe # executor type
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
        - add_ssh_keys:
            fingerprints:
                - "82:42:56:a0:57:43:95:4e:00:c0:8c:c1:7f:70:74:47"
        - checkout
        - run:
            name: Install dependencies
            command: |
              curl -fsSL --retry 3 --retry-delay 5 -o /tmp/sdl.zip https://www.libsdl.org/release/SDL2-devel-2.0.5-VC.zip
              curl -fsSL --retry 3 --retry-delay 5 -o /tmp/openal.zip https://openal-soft.org/openal-binaries/openal-soft-1.17.2-bin.zip
              curl -fsSL --retry 3 --retry-delay 5 -o /tmp/ffmpeg.zip https://github.com/HaxeFoundation/hashlink/files/5648056/ffmpeg-3.4.2-win64-dev.zip
              cd /tmp
              7z x /tmp/sdl.zip    -oinclude; mv /tmp/include/SDL2*   /tmp/include/sdl
              7z x /tmp/openal.zip -oinclude; mv /tmp/include/openal* /tmp/include/openal
              7z x /tmp/ffmpeg.zip -oinclude; mv /tmp/include/ffmpeg* /tmp/include/ffmpeg
        - run:
            name: Install Neko
            command: |
              choco install --no-progress neko -y
              nekopath=$(/bin/find /c/ProgramData/chocolatey/lib/neko -name neko.dll -printf '%h\n')
              set NEKOPATH=$nekopath
              export PATH=$nekopath:"$PATH"
        - run:
            name: Install Haxe
            command: |
              download_url="https://github.com/HaxeFoundation/haxe/releases/download/4.3.3/haxe-4.3.3-win64.zip"
              echo "Downloading [$download_url]..."
              mkdir /tmp/haxe
              curl -fsSL --retry 3 --retry-delay 5 "$download_url" -o /tmp/haxe.zip
              7z x /tmp/haxe.zip -o/tmp
              mv -v /tmp/haxe_* /tmp/haxe
              cd /tmp/haxe
              mv haxe_* haxe
              export PATH=/tmp/haxe/haxe:"$PATH"
              export HAXE_STD_PATH=/tmp/haxe/haxe/std
              nekopath=$(/bin/find /c/ProgramData/chocolatey/lib/neko -name neko.dll -printf '%h\n')
              set NEKOPATH=$nekopath
              export PATH=$nekopath:"$PATH"
              haxelib setup ~/haxelib
              haxelib list
        - run: 
            name: Build Hashlink
            command: |
              mkdir ~/deps
              cd ~/deps
              git clone https://github.com/RandomityGuy/hashlink
              cd hashlink
              mv /tmp/include/sdl include/sdl
              mv /tmp/include/openal include/openal
              MSBuild.exe hl.sln -m -nologo -p:Configuration=Release -p:Platform=x64

        - run:
            name: Install haxe dependencies
            command: |
              export PATH=/tmp/haxe/haxe:"$PATH"
              export HAXE_STD_PATH=/tmp/haxe/haxe/std
              nekopath=$(/bin/find /c/ProgramData/chocolatey/lib/neko -name neko.dll -printf '%h\n')
              set NEKOPATH=$nekopath
              export PATH=$nekopath:"$PATH"
              haxelib install hxWebSockets
              haxelib dev hashlink ~/deps/hashlink/other/haxelib
              haxelib dev datachannel ~/datachannel

  #       - run:
  #           name: Compile MBHaxe
  #           command: |
  #             export PATH=/tmp/haxe/haxe:"$PATH"
  #             export HAXE_STD_PATH=/tmp/haxe/haxe/std
  #             nekopath=$(/bin/find /c/ProgramData/chocolatey/lib/neko -name neko.dll -printf '%h\n')
  #             set NEKOPATH=$nekopath
  #             export PATH=$nekopath:"$PATH"
  #             cd ~/project
  #             haxe compile-c.hxml
  #             cd native
  #             sed -i -e 's/MaxSpeed/Disabled/g' marblegame.vcxproj
  #             sed -i -e 's/<FunctionLevelLinking>true<\/FunctionLevelLinking>//g' marblegame.vcxproj
  #             sed -i -e 's/<IntrinsicFunctions>true<\/IntrinsicFunctions>//g' marblegame.vcxproj
  #             sed -i -e 's/<EnableCOMDATFolding>true<\/EnableCOMDATFolding>//g' marblegame.vcxproj
  #             sed -i -e 's/<OptimizeReferences>true<\/OptimizeReferences>//g' marblegame.vcxproj
  #             sed -i -e 's/HL_MAKE;//g' marblegame.vcxproj
  #             sed -i -e 's/<ClInclude Include=".*" \/>//g' marblegame.vcxproj
  #             sed -i -e 's/<ClCompile Include=".*" \/>//g' marblegame.vcxproj
  #             perl -0777 -i.marblegame.vcxproj -pe 's/<ItemGroup>[^.]*<\/ItemGroup>/<ItemGroup><ClCompile Include="marblegame.c" \/><\/ItemGroup>/g' marblegame.vcxproj
  #             HASHLINKPATH=~/deps/hashlink
  #             MSBuild.exe marblegame.sln -m -nologo -p:Configuration=Release -p:Platform=x64 -p:PlatformToolset=v142 -p:HASHLINK=$HASHLINKPATH
  #       - run:
  #           name: Package app bundle
  #           command: |
  #             cd ~/project
  #             mkdir release
  #             cd release
  #             cp ../native/x64/Release/marblegame.exe .
  #             mv marblegame.exe marbleblast.exe
  #             cp -r ../data .
  #             cp ~/deps/hashlink/x64/Release/libhl.dll .
  #             cp ~/deps/hashlink/x64/Release/fmt.hdll .
  #             cp ~/deps/hashlink/x64/Release/ui.hdll .
  #             cp ~/deps/hashlink/x64/Release/openal.hdll .
  #             cp ~/deps/hashlink/x64/Release/sdl.hdll .
  #             cp ~/deps/hashlink/x64/Release/ssl.hdll .
  #             cp ~/deps/hashlink/x64/Release/uv.hdll .
  #             cp ~/deps/hashlink/include/sdl/lib/x64/SDL2.dll .
  #             cp ~/deps/hashlink/include/openal/bin/Win64/soft_oal.dll ./OpenAL32.dll 
  #       - run:
  #           name: Zip bundle
  #           command: |
  #             cd ~/project
  #             7z a MBHaxe-Platinum-Win.zip release/

  #       - run:
  #           name: Upload to Artifact Storage
  #           command: |
  #             scp -o StrictHostKeyChecking=no -i $KEYPATH -P $PORT ~/project/MBHaxe-Platinum-Win.zip $REMOTEDIR/MBHaxe-Platinum-Win.zip
        # - store_artifacts:
        #     path: ~/project/MBHaxe-Platinum-Win.zip


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-mac:
    jobs:
      - build:
          filters:
            tags:
              only: /^\d+.\d+.\d+$/

  build-windows:
    jobs:
      - build-win:
          filters:
            tags:
              only: /^\d+.\d+.\d+$/